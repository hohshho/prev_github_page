{"componentChunkName":"component---src-templates-post-tsx","path":"/reactStudy_1/","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://www.udemy.com/course/best-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\n【한글자막】 React 완벽 가이드 with Redux, Next.js, TypeScript\n</a>\n를 정리한다</p>\n<p>이번 포스팅에서는 리액트의 핵심원리에 대해 정리한다.</p>\n<hr>\n<p><strong>리액트는 사용자 인터페이스를 구축하는 자바스크립트 라이브러리</strong></p>\n<h1 id=\"왜-리액트를-사용하는가\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B0%80\" aria-label=\"왜 리액트를 사용하는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 리액트를 사용하는가</h1>\n<p>Javascript는 브라우저 내 DOM조작, 이를 통해 화면을 랜더링한다.</p>\n<p>리액트는 컴포넌트 기반의 UI 라이브러리로 자바스크립트를 유용하게 이용할 수 있게 도와준다.</p>\n<p>리액트는 응용프로그램을 작은 컴포넌트로 분리, 조합해서 사용(선언형 방식)<br>\n-> 유지보수와 관리 향상\n<strong>복잡한 사용자 인터페이스를 구축하기에 용이하다</strong></p>\n<h2 id=\"routing\" style=\"position:relative;\"><a href=\"#routing\" aria-label=\"routing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Routing</h2>\n<blockquote>\n<p>서드 파티 라이브러리 설치 (React-router)</p>\n</blockquote>\n<h1 id=\"components--building-uis\" style=\"position:relative;\"><a href=\"#components--building-uis\" aria-label=\"components  building uis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Components &#x26; Building UIs</h1>\n<blockquote>\n<p>코드를 Component단위로 분리해 관리하면 <strong>재사용성</strong>, <strong>가독성</strong> 향상</p>\n</blockquote>\n<h2 id=\"react-vs-reactdom\" style=\"position:relative;\"><a href=\"#react-vs-reactdom\" aria-label=\"react vs reactdom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react vs reactDOM</h2>\n<ul>\n<li>react : UI라이브러리</li>\n<li>reactDOM : 웹사이트에 출력을 도와주는 모델</li>\n<li>React 주요 특징 중 하나는 Virtual DOM을 사용</li>\n<li>\n<p>DOM(Document Object Model) 이란?</p>\n<blockquote>\n<p>객체로 문서 구조를 표현하는 방법으로 XML이나 HTML로 작성한다. 웹 브라우저는 DOM을 활용하여 자바스크립트와 css적용</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>=> ReactDOM은 브라우저에 대한 리액트 어댑터</strong></p>\n<h3 id=\"페이지가-리로드-되는-과정\" style=\"position:relative;\"><a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%80%EA%B0%80-%EB%A6%AC%EB%A1%9C%EB%93%9C-%EB%90%98%EB%8A%94-%EA%B3%BC%EC%A0%95\" aria-label=\"페이지가 리로드 되는 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>페이지가 리로드 되는 과정</h3>\n<ol>\n<li>데이터를 업데이트하면 전체 UI를 Virtual DOM에 리랜더링 한다.</li>\n<li>이전 Virtual DOM에 있던 내용과 비교</li>\n<li>바뀐 부분만 실제 DOM에 적용</li>\n</ol>\n<h3 id=\"주요-특징\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9A%94-%ED%8A%B9%EC%A7%95\" aria-label=\"주요 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주요 특징</h3>\n<ul>\n<li>리액트는 단방향 데이터 플로우를 가지고 있다.</li>\n<li>데이터는 항상 일정한 장소에 위치하고, 그 장소에서만 변경 가능!</li>\n<li>선언적 접근 방법(state정의 -> 상태 처리)</li>\n<li>reactDOM은 컴포넌트를 출력(Render)하고, Component는 항상 render, return 해야 함</li>\n<li>react app은 하나의 component만 rendering (App Component)</li>\n</ul>\n<p>public/index.html &#x3C;- 여기에 src/index.js 가 붙여주는 방식<br>\n=> Single Page Application</p>\n<p><strong>Tip!</strong></p>\n<ul>\n<li>import시 js파일은 확장자 생략 가능, css파일은 생략 불가능</li>\n</ul>\n<h3 id=\"jsxjavascript-xml\" style=\"position:relative;\"><a href=\"#jsxjavascript-xml\" aria-label=\"jsxjavascript xml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSX(JavaScript XML)</h3>\n<ul>\n<li>return으로 반환되는 Component / JSX는 반드시 root요소를 가진다.</li>\n<li>css 이름을 적용할 때 - classname으로 이름 지정</li>\n</ul>\n<h3 id=\"react-naming\" style=\"position:relative;\"><a href=\"#react-naming\" aria-label=\"react naming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Naming</h3>\n<ul>\n<li>소문자로 시작하는 요소는 내장된 html요소 -> <strong>Component는 대문자로 시작</strong></li>\n</ul>\n<h2 id=\"components\" style=\"position:relative;\"><a href=\"#components\" aria-label=\"components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Components</h2>\n<ul>\n<li>자바스크립트 표현식 작성 시 JSX내부에서 {}로 감싸면 된다.</li>\n<li>부모 컴포넌트로 부터 자식 컴포넌트로 값을 전달시 props로 사용</li>\n<li>여러개의 컴포넌트를 하나의 컴포넌트로 조합해 사용 -> <strong>합성(Composition)</strong></li>\n<li><strong>Wrapper Component</strong> - 여러 컴포넌트를 감싸는 방식</li>\n<li><strong>props.children</strong> 자식 엘리먼트를 출력에 전달 가능</li>\n</ul>\n<h1 id=\"working-with-events-state--props\" style=\"position:relative;\"><a href=\"#working-with-events-state--props\" aria-label=\"working with events state  props permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with Events, state &#x26; props</h1>\n<ul>\n<li>리액트는 모든 기본 이벤트를 <strong>on으로 시작하는 props</strong>로 나타낸다</li>\n<li>모든 이벤트 핸들러는 props값으로 <strong>함수 필요</strong></li>\n<li>이벤트는 모두 DOM 기본 동작에 기반</li>\n<li><a href=\"https://ko.reactjs.org/docs/events.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react 이벤트 종류</a></li>\n</ul>\n<h3 id=\"onchange-vs-oninput\" style=\"position:relative;\"><a href=\"#onchange-vs-oninput\" aria-label=\"onchange vs oninput permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>onChange vs onInput</h3>\n<blockquote>\n<p>onChange은 모든 입력 입력타입에 같은 이벤트 사용 가능</p>\n</blockquote>\n<h2 id=\"state\" style=\"position:relative;\"><a href=\"#state\" aria-label=\"state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State</h2>\n<blockquote>\n<p>리액트는 원하는 state 설정 => state에 맞게 화면 rendering</p>\n</blockquote>\n<ul>\n<li>State는 컴포넌트 객체 별로 나뉘어져서 따로 관리된다.</li>\n</ul>\n<h3 id=\"usestate\" style=\"position:relative;\"><a href=\"#usestate\" aria-label=\"usestate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useState</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// useState에서 반환되는 값 1) 상태명, 2) 1에서 정한 상태를 변경하는 함수</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"state-update\" style=\"position:relative;\"><a href=\"#state-update\" aria-label=\"state update permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Update</h3>\n<blockquote>\n<p>이전 상태에 따라 상태를 업데이트 할 때 아래 처럼 callback 함수로 구현</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">titleChangeHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setUserInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"lifting-state-up\" style=\"position:relative;\"><a href=\"#lifting-state-up\" aria-label=\"lifting state up permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lifting State Up</h2>\n<blockquote>\n<p>props로 함수를 넘겨 전달 (자식 -> 부모 컴포넌트로 값 전달)</p>\n</blockquote>\n<h2 id=\"stateless-component\" style=\"position:relative;\"><a href=\"#stateless-component\" aria-label=\"stateless component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stateless component</h2>\n<blockquote>\n<p>데이터 출력만을 위한 컴포넌트(해당 컴포넌트에서 관리하는 state 없음)</p>\n</blockquote>\n<h1 id=\"working-with-dynamic-contents\" style=\"position:relative;\"><a href=\"#working-with-dynamic-contents\" aria-label=\"working with dynamic contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with Dynamic Contents</h1>\n<p>react 컴포넌트 별로 key값을 지정할 수 있음<br>\n-> 이렇게 지정하면 업데이트 할 때 특정 위치에 정확히 삽입 가능<br>\n-> key가 없으면 값을 추가하는 위치를 정확히 인지하지 못해서 rerendering이 일어남 -> 성능상 이슈<br>\n-> 목록 리스트가 존재하면 key값을 주는게 좋다</p>\n<h2 id=\"rendering-list\" style=\"position:relative;\"><a href=\"#rendering-list\" aria-label=\"rendering list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rendering List</h2>\n<blockquote>\n<p>array 객체의 map함수 이용 동적으로 contents 추가</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> itemfilter <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> selectedDate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>\n      itemfilter<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>ExpenseItem key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span> amount<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">}</span> date<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>filter함수를 추가해 조건에 따라 contents 반환 할 수 있다.</p>\n<h2 id=\"conditional-content\" style=\"position:relative;\"><a href=\"#conditional-content\" aria-label=\"conditional content permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditional Content</h2>\n<blockquote>\n<p>{} 안에 3항 연산자를 사용해 조견별 component 출력이 가능하다</p>\n</blockquote>\n<h1 id=\"styling-components\" style=\"position:relative;\"><a href=\"#styling-components\" aria-label=\"styling components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Styling Components</h1>\n<p>Component에 스타일을 적용하는 방법은 4가지</p>\n<h2 id=\"1-인라인-요소로-css-추가\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%EC%9A%94%EC%86%8C%EB%A1%9C-css-%EC%B6%94%EA%B0%80\" aria-label=\"1 인라인 요소로 css 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 인라인 요소로 css 추가</h2>\n<p>html태그의 style속성을 동적으로 줘서 css변경 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> barFillHeight <span class=\"token operator\">=</span> <span class=\"token string\">'20%'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> barFillHeight<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> <span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 방식대로 style을 주면 <strong>인라인 방식</strong>이라 코드 가독성이 떨어짐</p>\n<h2 id=\"2-css파일로-분리\" style=\"position:relative;\"><a href=\"#2-css%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EB%B6%84%EB%A6%AC\" aria-label=\"2 css파일로 분리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) .css파일로 분리</h2>\n<p><strong>className을 동적으로 변경</strong>해서 css 적용 가능<br>\n-> 같은 class name을 사용하는 경우 문제</p>\n<h2 id=\"3-styled-components\" style=\"position:relative;\"><a href=\"#3-styled-components\" aria-label=\"3 styled components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) Styled Components</h2>\n<blockquote>\n<p>서드 파티 라이브러리, 고유한 범위를 가진 스타일로 미리 스타일이 지정된 컴포넌트로 지정 가능</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> FormControl <span class=\"token operator\">=</span> styled<span class=\"token punctuation\">.</span>div<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  margin: 0.5rem 0;\n  &amp; label {\n    font-weight: bold;\n    display: block;\n    margin-bottom: 0.5rem;\n    color: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>invalid <span class=\"token operator\">?</span> <span class=\"token string\">'red'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;\n  }s\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>styled를 import해 객체를 만들어 사능</li>\n<li>HTML의 모든 태그가 정의되어 있음</li>\n<li>props를 전달해 동적으로 변환 가능</li>\n<li>미디어 쿼리 적용 가능</li>\n</ul>\n<h2 id=\"4-css-module\" style=\"position:relative;\"><a href=\"#4-css-module\" aria-label=\"4 css module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) CSS Module</h2>\n<p>react css module 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Button.module.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">}</span> className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>컴포넌트 이름<em>클래스 이름</em>해시 값</strong>으로 동적으로 클래스명이 생긴다.</li>\n</ul>\n<p><a href=\"https://github.com/gajus/babel-plugin-react-css-modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">babel-plugin-react-css-modules</a></p>\n<h1 id=\"fragments-portals--refs\" style=\"position:relative;\"><a href=\"#fragments-portals--refs\" aria-label=\"fragments portals  refs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fragments, Portals &#x26; Refs</h1>\n<h2 id=\"fragments\" style=\"position:relative;\"><a href=\"#fragments\" aria-label=\"fragments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fragments</h2>\n<blockquote>\n<p>리액트는 HTML태그를 트리 구조로 생성하기 때문에 루트 태그가 반드시 필요</p>\n</blockquote>\n<p>빈 div태그로 감싸는 방법 -> 많은 태그들이 생기면서 성능상에도 좋지 않을 수 있음<br>\n<strong>=> &#x3C;React.Fragment></strong> 사용</p>\n<ul>\n<li>\n<ol>\n<li>Wrapper 태그 생성</li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Wrapper</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> props<span class=\"token punctuation\">.</span>chilren<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<ol start=\"2\">\n<li>React.Fragment 사용 - 빈 Wrapper 렌더링</li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"portals--refs\" style=\"position:relative;\"><a href=\"#portals--refs\" aria-label=\"portals  refs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Portals &#x26; Refs</h2>\n<h3 id=\"portals\" style=\"position:relative;\"><a href=\"#portals\" aria-label=\"portals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Portals</h3>\n<blockquote>\n<p>메인 DOM 외부에 앨리먼트 일부를 그리기 위한 기능\n(앨리먼트를 다른 돔으로 옮겨 CSS 상속 구조에 영향 받지 않음)</p>\n</blockquote>\n<p>ex) 모달, 사이드 드로워</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">return</span>\n<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fargment<span class=\"token operator\">></span>\n  <span class=\"token comment\">// createPortal 함수 사용</span>\n  <span class=\"token comment\">// 1. 렌더링 되는 리액트 노드 (JSX 주의)</span>\n  <span class=\"token comment\">// 2. 렌더링 되어야 하는 실제 DOM 컨테이너 (실제 HTML DOM요소 - Browser API 사용)</span>\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Backdrop <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'backdrop-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fargment<span class=\"token operator\">></span></code></pre></div>\n<h3 id=\"refs\" style=\"position:relative;\"><a href=\"#refs\" aria-label=\"refs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refs</h3>\n<blockquote>\n<p>다른 DOM요소에 접근해 사용 가능</p>\n</blockquote>\n<p>input같은 경우 키 입력마다 state를 변경하는 것은 비 효율적<br>\n<strong>-> useRef사용</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> inputData <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>모든 훅과 마찬가지로 함수형 컴포넌트에만 사용 가능</li>\n<li>사용하고 싶은 태그로 가서 ref 속성 추가</li>\n<li>어떤 HTML요소라도 하나에 연결 가능</li>\n<li>반환값으로 <strong>객체 전달</strong> -> {변수}.current.value 값 사용</li>\n<li><strong>입력된 값을 초기화</strong> 하고 싶은 경우 유용</li>\n</ul>\n<h4 id=\"refs값을-재설정-하는-방법\" style=\"position:relative;\"><a href=\"#refs%EA%B0%92%EC%9D%84-%EC%9E%AC%EC%84%A4%EC%A0%95-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"refs값을 재설정 하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refs값을 재설정 하는 방법</h4>\n<ol>\n<li>Ref 변수를 직접 변경</li>\n<li>stateHandler함수로 state 변경</li>\n</ol>\n<blockquote>\n<p>단순히 값을 변경하는 것으로 <strong>Ref 변수를 직접 변경하는 것을 추천</strong></p>\n</blockquote>\n<h4 id=\"제어-컴포넌트-vs-비제어-컴포넌트\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EC%96%B4-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-vs-%EB%B9%84%EC%A0%9C%EC%96%B4-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"제어 컴포넌트 vs 비제어 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제어 컴포넌트 vs 비제어 컴포넌트</h4>\n<blockquote>\n<p>React에 의해 값이 제어되는 입력 폼 엘리먼트 “제어 컴포넌트 (controlled component)“ ex) input, textarea, select</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 제어 가능한 컴포넌트 -> 항상 최신값으로 유지</span>\n<span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>title <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>titleChangeHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// 비 제어 컴포넌트 -> 필드에서 값을 트리거해 값 사용</span>\n<span class=\"token operator\">&lt;</span>input id<span class=\"token operator\">=</span><span class=\"token string\">\"age\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"number\"</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ageInputRef<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>제어 가능한 컴포넌트 -> 항상 최신값으로 유지<br>\n비 제어 컴포넌트 -> 필드에서 값을 트리거해 값 사용</p>\n<table>\n<thead>\n<tr>\n<th>기능</th>\n<th>제어 컴포넌트</th>\n<th>비제어 컴포넌트</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>일회성 정보 제출</td>\n<td>O</td>\n<td>O</td>\n</tr>\n<tr>\n<td>제출 시 값 검증</td>\n<td>O</td>\n<td>O</td>\n</tr>\n<tr>\n<td>실시간 필드 값 검사</td>\n<td>O</td>\n<td>X</td>\n</tr>\n<tr>\n<td>조건부로 제출 버튼 비 활성화</td>\n<td>O</td>\n<td>X</td>\n</tr>\n<tr>\n<td>실시간 입력 형식 적용</td>\n<td>O</td>\n<td>X</td>\n</tr>\n<tr>\n<td>동적 입력</td>\n<td>O</td>\n<td>X</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip!!</h1>\n<h2 id=\"npm-error-날-경우\" style=\"position:relative;\"><a href=\"#npm-error-%EB%82%A0-%EA%B2%BD%EC%9A%B0\" aria-label=\"npm error 날 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm error 날 경우</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> cache clean <span class=\"token parameter variable\">--force</span>\n$ <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> node_modules package-lock.json\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre></div>\n<h2 id=\"객체에-number-저장\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%97%90-number-%EC%A0%80%EC%9E%A5\" aria-label=\"객체에 number 저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체에 Number 저장</h2>\n<p>간혹가다 숫자로 객체를 생성하려다가 문자열로 생성되는 경우가 있는데<br>\n+를 붙여줘 형변환이 일어나게 저장하면 문제 해결 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span> <span class=\"token operator\">:</span> <span class=\"token operator\">+</span>age\n  <span class=\"token literal-property property\">date</span> <span class=\"token operator\">:</span> date\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"함수에-언더스코어_를-붙여서-만듬\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%97%90-%EC%96%B8%EB%8D%94%EC%8A%A4%EC%BD%94%EC%96%B4_%EB%A5%BC-%EB%B6%99%EC%97%AC%EC%84%9C-%EB%A7%8C%EB%93%AC\" aria-label=\"함수에 언더스코어_를 붙여서 만듬 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수에 언더스코어(_)를 붙여서 만듬</h2>\n<p>-> 이유는, 리액트는 자체 기능이 많기 때문에 리액트 자체기능과 구분하기 위해서</p>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://www.udemy.com/course/best-react/learn/lecture/28517643#overview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Udemy - React 완벽 가이드 with Redux, Next.js, TypeScript</a></li>\n<li><a href=\"https://velog.io/@yukyung/React-%EC%A0%9C%EC%96%B4-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80-%EB%B9%84%EC%A0%9C%EC%96%B4-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90-%ED%86%BA%EC%95%84%EB%B3%B4%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React: 제어 컴포넌트와 비제어 컴포넌트의 차이점</a></li>\n<li><a href=\"https://goshacmd.com/controlled-vs-uncontrolled-inputs-react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Controlled and uncontrolled form inputs in React don't have to be complicated</a></li>\n<li><a href=\"https://dev.to/dylanju/useref-3j37\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dev.to/dylanju/useref-3j37</a></li>\n</ul>","excerpt":"【한글자막】 React 완벽 가이드 with Redux, Next.js, TypeScript\n\n를 정리한다 이번 포스팅에서는 리액트의 핵심원리에 대해 정리한다. 리액트는 사용자 인터페이스를 구축하는 자바스크립트 라이브러리 왜 리액트를 사용하는가 Ja…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/reactStudy_1/#%EC%99%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B0%80\">왜 리액트를 사용하는가</a></p>\n<ul>\n<li><a href=\"/reactStudy_1/#routing\">Routing</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/reactStudy_1/#components--building-uis\">Components &#x26; Building UIs</a></p>\n<ul>\n<li>\n<p><a href=\"/reactStudy_1/#react-vs-reactdom\">react vs reactDOM</a></p>\n<ul>\n<li><a href=\"/reactStudy_1/#%ED%8E%98%EC%9D%B4%EC%A7%80%EA%B0%80-%EB%A6%AC%EB%A1%9C%EB%93%9C-%EB%90%98%EB%8A%94-%EA%B3%BC%EC%A0%95\">페이지가 리로드 되는 과정</a></li>\n<li><a href=\"/reactStudy_1/#%EC%A3%BC%EC%9A%94-%ED%8A%B9%EC%A7%95\">주요 특징</a></li>\n<li><a href=\"/reactStudy_1/#jsxjavascript-xml\">JSX(JavaScript XML)</a></li>\n<li><a href=\"/reactStudy_1/#react-naming\">React Naming</a></li>\n</ul>\n</li>\n<li><a href=\"/reactStudy_1/#components\">Components</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/reactStudy_1/#working-with-events-state--props\">Working with Events, state &#x26; props</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/reactStudy_1/#onchange-vs-oninput\">onChange vs onInput</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/reactStudy_1/#state\">State</a></p>\n<ul>\n<li><a href=\"/reactStudy_1/#usestate\">useState</a></li>\n<li><a href=\"/reactStudy_1/#state-update\">State Update</a></li>\n</ul>\n</li>\n<li><a href=\"/reactStudy_1/#lifting-state-up\">Lifting State Up</a></li>\n<li><a href=\"/reactStudy_1/#stateless-component\">stateless component</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/reactStudy_1/#working-with-dynamic-contents\">Working with Dynamic Contents</a></p>\n<ul>\n<li><a href=\"/reactStudy_1/#rendering-list\">Rendering List</a></li>\n<li><a href=\"/reactStudy_1/#conditional-content\">Conditional Content</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/reactStudy_1/#styling-components\">Styling Components</a></p>\n<ul>\n<li><a href=\"/reactStudy_1/#1-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%EC%9A%94%EC%86%8C%EB%A1%9C-css-%EC%B6%94%EA%B0%80\">1) 인라인 요소로 css 추가</a></li>\n<li><a href=\"/reactStudy_1/#2-css%ED%8C%8C%EC%9D%BC%EB%A1%9C-%EB%B6%84%EB%A6%AC\">2) .css파일로 분리</a></li>\n<li><a href=\"/reactStudy_1/#3-styled-components\">3) Styled Components</a></li>\n<li><a href=\"/reactStudy_1/#4-css-module\">4) CSS Module</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/reactStudy_1/#fragments-portals--refs\">Fragments, Portals &#x26; Refs</a></p>\n<ul>\n<li><a href=\"/reactStudy_1/#fragments\">Fragments</a></li>\n<li>\n<p><a href=\"/reactStudy_1/#portals--refs\">Portals &#x26; Refs</a></p>\n<ul>\n<li><a href=\"/reactStudy_1/#portals\">Portals</a></li>\n<li><a href=\"/reactStudy_1/#refs\">Refs</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/reactStudy_1/#tip\">Tip!!</a></p>\n<ul>\n<li><a href=\"/reactStudy_1/#npm-error-%EB%82%A0-%EA%B2%BD%EC%9A%B0\">npm error 날 경우</a></li>\n<li><a href=\"/reactStudy_1/#%EA%B0%9D%EC%B2%B4%EC%97%90-number-%EC%A0%80%EC%9E%A5\">객체에 Number 저장</a></li>\n<li><a href=\"/reactStudy_1/#%ED%95%A8%EC%88%98%EC%97%90-%EC%96%B8%EB%8D%94%EC%8A%A4%EC%BD%94%EC%96%B4_%EB%A5%BC-%EB%B6%99%EC%97%AC%EC%84%9C-%EB%A7%8C%EB%93%AC\">함수에 언더스코어(_)를 붙여서 만듬</a></li>\n</ul>\n</li>\n<li><a href=\"/reactStudy_1/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/reactStudy_1/"},"frontmatter":{"title":"React 핵심 기능","date":"Aug 15, 2022","tags":["React"],"keywords":["React"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/reactStudy_1/","series":[{"slug":"/reactStudy_1/","title":"React 핵심 기능","num":1},{"slug":"/reactStudy_2/","title":"React Hooks & Http Request","num":2},{"slug":"/reactStudy_3/","title":"React Redux, Routing","num":3}],"lastmod":"2022-08-15"}},"staticQueryHashes":["2027115977","694178885"]}