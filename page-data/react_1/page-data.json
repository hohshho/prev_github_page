{"componentChunkName":"component---src-templates-post-tsx","path":"/react_1/","result":{"data":{"markdownRemark":{"html":"<p>회사에서 로그인 페이지 구현 및 정리를 하게 되었는데</p>\n<p>이해한 비즈니스 로직을 바탕으로 간단하게 사이드 프로젝트를 진행하려고 한다.</p>\n<p>클라이언트단을 구현하기 위해 개념 정리를 부터 해보자.</p>\n<p>react, 상태 관리를 위한 redux, redux-toolkit, 서버요청을 위한 redux-saga, react-query 순으로 정리 할 예정</p>\n<p>목표는 이번주 안에 관련 Doc을 읽고, 주말부터 프로젝트 시작해보자</p>\n<hr>\n<p><strong>03-14 Update</strong></p>\n<p>정리 못한 부분 내용 추가 + </p>\n<p>건강 이슈가 발생해.... 계획한 일정이 한 주씩 밀려버렸다... ㅜㅜㅜ</p>\n<hr>\n<h2 id=\"jsx\" style=\"position:relative;\"><a href=\"#jsx\" aria-label=\"jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSX</h2>\n<blockquote>\n<p>JavaScript eXtention -> JS의 확장 버전</p>\n</blockquote>\n<ol>\n<li>감싸인 요소 사용<br>\n-> 컴포넌트에 여러 요소가 있으면 부모 요소로 감싸야 함<br>\n-> 감싸지 않을 경우 Fragment 컴포넌트 사용  </li>\n<li>조건부 연산자 사용 (if x)<br>\n-> 참 인경우만 사용할 경우 <strong>&#x26;&#x26; 사용</strong></li>\n<li>인라인 스타일링 </li>\n<li>class 대신 className사용</li>\n<li>태그를 꼭 닫아야 함</li>\n<li>사용자 정의 컴포넌트는 대문자로 시작해야 한다.</li>\n</ol>\n<p><strong>Tip!!</strong></p>\n<blockquote>\n<p>React DOM은 JSX에 삽입된 모든 값을 렌더링하기 전에 문자열로 반환<br>\n-> XSS(cross-site-scripting) 공격 방지 가능</p>\n</blockquote>\n<h2 id=\"props-state\" style=\"position:relative;\"><a href=\"#props-state\" aria-label=\"props state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Props, State</h2>\n<blockquote>\n<p>State : 컴포넌트 내 관리하는 값 / Props : 부모 컴포넌트에 상속받은 값</p>\n</blockquote>\n<ul>\n<li>선언한 함수를 this.로 사용하려면 construct에서 <strong>바인딩</strong> 해줘야 함</li>\n</ul>\n<h2 id=\"event-handler\" style=\"position:relative;\"><a href=\"#event-handler\" aria-label=\"event handler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event Handler</h2>\n<ul>\n<li>CamelCase로 작성</li>\n<li>함수 형태의 값 전달</li>\n<li>Dom요소에만 이벤트 설정 가능</li>\n</ul>\n<h2 id=\"class-component-vs-function-component\" style=\"position:relative;\"><a href=\"#class-component-vs-function-component\" aria-label=\"class component vs function component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class Component vs Function Component</h2>\n<p>Function Component : 일반 컴포넌트와 달리 state, 라이플 사이클 기능 제거<br>\n-> 일반 크래스형 함수보다 빠르다.</p>\n<h2 id=\"lifecycle\" style=\"position:relative;\"><a href=\"#lifecycle\" aria-label=\"lifecycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LifeCycle</h2>\n<p>음... 이건 좀 귀찮은데 <a href=\"https://ko.reactjs.org/docs/react-component.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react lifecycle doc</a> 필요한 부분에 적절히 코드 넣어서 분기처리 하면 된다.</p>\n<h2 id=\"router\" style=\"position:relative;\"><a href=\"#router\" aria-label=\"router permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Router</h2>\n<blockquote>\n<p>react-router를 사용해 url을 통한 load되는 component를 분기처리 할 수 있음</p>\n</blockquote>\n<ul>\n<li>App.js에서 Route설정</li>\n<li>Params</li>\n<li>Query String은 query-string라이브러리로 가져온다.</li>\n<li>다른 라우터로 이동 시 <strong>Link 컴포넌트</strong> 사용 (새로고침이 일어나지 않는다.)</li>\n<li>Link컴포넌트로 이동 할 때 다른 style주고 싶은 경우 <strong>NavLink 컴포넌트</strong> 사용 -> style전달 가능</li>\n<li>route로 사용하지 않은 컴포넌트는 <strong>withRouter 함수</strong>로 감싸주면 객체 조회 가능</li>\n<li>\n<p>route로 사용된 컴포넌트 Props</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">location : \nmatch : \nhistory : </code></pre></div>\n</li>\n</ul>\n<h2 id=\"ref\" style=\"position:relative;\"><a href=\"#ref\" aria-label=\"ref permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ref</h2>\n<blockquote>\n<p>태그 ID처럼 컴포넌트 이름 달아줄 때 사용!</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">포커스, 텍스트 선택영역, 혹은 미디어의 재생을 관리할 때.\n애니메이션을 직접적으로 실행시킬 때.\n서드 파티 DOM 라이브러리를 React와 같이 사용할 때.</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"codesplit\" style=\"position:relative;\"><a href=\"#codesplit\" aria-label=\"codesplit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CodeSplit</h2>\n<blockquote>\n<p>코드 쪼개고 필요한 컴포넌트에서 불러와서 사용</p>\n</blockquote>\n<h2 id=\"context\" style=\"position:relative;\"><a href=\"#context\" aria-label=\"context permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context</h2>\n<blockquote>\n<p>전역적으로 state사용할 때 사용</p>\n</blockquote>\n<h2 id=\"고차-컴포넌트\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EC%B0%A8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\" aria-label=\"고차 컴포넌트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고차 컴포넌트</h2>\n<h2 id=\"portals\" style=\"position:relative;\"><a href=\"#portals\" aria-label=\"portals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Portals</h2>\n<h2 id=\"reconciliation\" style=\"position:relative;\"><a href=\"#reconciliation\" aria-label=\"reconciliation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reconciliation</h2>\n<h2 id=\"react-hook\" style=\"position:relative;\"><a href=\"#react-hook\" aria-label=\"react hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Hook</h2>\n<p>기본 라이프사이클에 넣어서 state를 바꿔 화면 렌더링 하는게 가능하지만 반복코드가 많고, 읽기 싫어지고, 짜기도 싫어짐<br>\n-> 걍 쉽게 공통함수 만들어서 사용하는거</p>\n<p>개념은 이정도 정리하고, 내일은 Redux Document를 열심히 읽어보자 ㅎㅎ</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p><a href=\"https://ko.reactjs.org/docs/getting-started.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Document</a><br>\n<a href=\"https://velog.io/@velopert/using-redux-in-2021#redux-toolkit%EC%9D%80-%EC%9D%B4%EC%A0%9C-%ED%95%84%EC%88%98%ED%85%9C%EC%9E%85%EB%8B%88%EB%8B%A4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux 어떻게 써야 잘 썼다고 소문이 날까?</a><br>\n리액트를 다루는 기술   </p>","excerpt":"회사에서 로그인 페이지 구현 및 정리를 하게 되었는데 이해한 비즈니스 로직을 바탕으로 간단하게 사이드 프로젝트를 진행하려고 한다. 클라이언트단을 구현하기 위해 개념 정리를 부터 해보자. react, 상태 관리를 위한 redux, redux-toolk…","tableOfContents":"<ul>\n<li><a href=\"/react_1/#jsx\">JSX</a></li>\n<li><a href=\"/react_1/#props-state\">Props, State</a></li>\n<li><a href=\"/react_1/#event-handler\">Event Handler</a></li>\n<li><a href=\"/react_1/#class-component-vs-function-component\">Class Component vs Function Component</a></li>\n<li><a href=\"/react_1/#lifecycle\">LifeCycle</a></li>\n<li><a href=\"/react_1/#router\">Router</a></li>\n<li><a href=\"/react_1/#ref\">Ref</a></li>\n<li><a href=\"/react_1/#codesplit\">CodeSplit</a></li>\n<li><a href=\"/react_1/#context\">Context</a></li>\n<li><a href=\"/react_1/#%EA%B3%A0%EC%B0%A8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\">고차 컴포넌트</a></li>\n<li><a href=\"/react_1/#portals\">Portals</a></li>\n<li><a href=\"/react_1/#reconciliation\">Reconciliation</a></li>\n<li><a href=\"/react_1/#react-hook\">React Hook</a></li>\n<li><a href=\"/react_1/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/react_1/"},"frontmatter":{"title":"리액트 정리","date":"Mar 07, 2022","tags":["React"],"keywords":["React"],"update":"Mar 14, 2022"}}},"pageContext":{"slug":"/react_1/","series":[{"slug":"/react_1/","title":"리액트 정리","num":1}],"lastmod":"2022-03-14"}},"staticQueryHashes":["2027115977","694178885"]}