{"componentChunkName":"component---src-templates-post-tsx","path":"/JPA_3/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"entity-mapping\" style=\"position:relative;\"><a href=\"#entity-mapping\" aria-label=\"entity mapping permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity Mapping</h1>\n<p>양방향 매핑 설정</p>\n<blockquote>\n<p>jackson라이브러리는 json생성 방법에 대해 모름 (무한 루프)</p>\n</blockquote>\n<ol>\n<li>양방향 매핑관계 설정 시 한쪽에 <strong>@JsonIgnore</strong> 처리 해야 함<br>\n-> 실제로 Property에 Null 할당하는 방식</li>\n<li>@JsonBackReference // 부모 클래스 , @JsonManagedReference // 자식 클래스\n-> 순환참조 방어</li>\n<li>Entity 대신 DTO 사용</li>\n</ol>\n<h2 id=\"entity-사용시-문제\" style=\"position:relative;\"><a href=\"#entity-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EB%AC%B8%EC%A0%9C\" aria-label=\"entity 사용시 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity 사용시 문제</h2>\n<p>엔티티를 반환값에 직접 사용 할 경우 XtoOne 관계(LASY 로딩일 경우)에서 객체가 없기 때문에 하이버네이트가 프록시 객체 생성<br>\n-> Jackson 라이브러리가 값을 읽다 문제 발생</p>\n<p>해결 방법</p>\n<p>hibernate5Module 사용</p>\n<ol>\n<li>강제 지연 로딩 설정</li>\n<li>강제로 연관관계 객체를 초기화</li>\n</ol>\n<p>결론 : 엔티티를 외부로 노출하지 말고 <strong>DTO 사용</strong>\n(<strong>내부 컬랙션도 전부 DTO</strong>로 바꿔줘야 함 -> 바꿔주지 않으면 내부 스펙 노출)</p>\n<h2 id=\"dto-사용-시-장점\" style=\"position:relative;\"><a href=\"#dto-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EC%9E%A5%EC%A0%90\" aria-label=\"dto 사용 시 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DTO 사용 시 장점</h2>\n<ul>\n<li>Entity와 API 스펙 분리 가능</li>\n<li>Entity가 변경될 경우 API 스펙 유지 가능</li>\n</ul>\n<h1 id=\"성능-튜닝\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5-%ED%8A%9C%EB%8B%9D\" aria-label=\"성능 튜닝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>성능 튜닝</h1>\n<h2 id=\"1-entity를-dto-변환---패치-조인\" style=\"position:relative;\"><a href=\"#1-entity%EB%A5%BC-dto-%EB%B3%80%ED%99%98---%ED%8C%A8%EC%B9%98-%EC%A1%B0%EC%9D%B8\" aria-label=\"1 entity를 dto 변환   패치 조인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Entity를 DTO 변환 -> 패치 조인</h2>\n<blockquote>\n<p>XtoOne 관계 설정 시 N+1문제 발생</p>\n</blockquote>\n<p>=> 페치 조인(fetch join)을 사용해서 쿼리 1번에 조회</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllWithMemberDelivery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"select o from Order o\"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\" join fetch o.member m\"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\" join fetch o.delivery d\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"2-dto-직접-조회\" style=\"position:relative;\"><a href=\"#2-dto-%EC%A7%81%EC%A0%91-%EC%A1%B0%ED%9A%8C\" aria-label=\"2 dto 직접 조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. DTO 직접 조회</h2>\n<p>=> select 절에 new를 사용해 JPQL 결과를 DTO로 즉시 변환</p>\n<p>복잡한 쿼리를 DTO로 뽑아야 할 때 QueryService or QueryRepository로 빼서 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderQueryDto</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findOrderDtos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"select new jpabook.jpashop.repositoryerQueryDto(o.id, m.name, o.orderDate, o.status,ddress) \"</span> <span class=\"token operator\">+</span>\n      <span class=\"token string\">\"from Order o\"</span> <span class=\"token operator\">+</span>\n      <span class=\"token string\">\" join o.member m\"</span> <span class=\"token operator\">+</span>\n      <span class=\"token string\">\" join o.delivery d\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OrderQueryDto</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>단점</p>\n<ul>\n<li>리포지토리 재사용성 떨어짐</li>\n<li>API 스펙에 맞춘 코드가 리포지토리에 들어감</li>\n</ul>\n<h3 id=\"성능-튜닝-권장-순서\" style=\"position:relative;\"><a href=\"#%EC%84%B1%EB%8A%A5-%ED%8A%9C%EB%8B%9D-%EA%B6%8C%EC%9E%A5-%EC%88%9C%EC%84%9C\" aria-label=\"성능 튜닝 권장 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>성능 튜닝 권장 순서</h3>\n<ol>\n<li>Entity -> DTO 변환</li>\n<li>fetch join으로 최적화 (대부분 성능 이슈 해결)</li>\n<li>DTO로 직접 조회</li>\n<li>JPA Native SQL or JDBC Template으로 SQL직접 사용</li>\n</ol>\n<h2 id=\"컬렉션-조인-최적화\" style=\"position:relative;\"><a href=\"#%EC%BB%AC%EB%A0%89%EC%85%98-%EC%A1%B0%EC%9D%B8-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"컬렉션 조인 최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컬렉션 조인 최적화</h2>\n<p>OneToMany 인 경우 distinct와 fetch join을 사용해 최적화<br>\n-> 컬렉션은 페치 조인시 페이징이 불가능</p>\n<p>JPA의 distinct는 2가지 역할</p>\n<ul>\n<li>SQL에 distinct 추가</li>\n<li>같은 엔티티가 조회되면 중복 제거</li>\n</ul>\n<h2 id=\"컬렉션-엔티티-사용-시-페이징-처리\" style=\"position:relative;\"><a href=\"#%EC%BB%AC%EB%A0%89%EC%85%98-%EC%97%94%ED%8B%B0%ED%8B%B0-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%ED%8E%98%EC%9D%B4%EC%A7%95-%EC%B2%98%EB%A6%AC\" aria-label=\"컬렉션 엔티티 사용 시 페이징 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컬렉션 엔티티 사용 시 페이징 처리</h2>\n<h3 id=\"1-엔티티-직접-조회\" style=\"position:relative;\"><a href=\"#1-%EC%97%94%ED%8B%B0%ED%8B%B0-%EC%A7%81%EC%A0%91-%EC%A1%B0%ED%9A%8C\" aria-label=\"1 엔티티 직접 조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 엔티티 직접 조회</h3>\n<ul>\n<li>ToOne 관계 모두 페치 조인, 컬렉션 지연조인</li>\n<li>hibernate.default<em>batch</em>fetch_size 설정, @BatchSize 적용</li>\n<li>개별 @BatchSize 적용 시 XtoOne - 엔티티, XtoMany(Collection) - 컬렉션 필드</li>\n</ul>\n<h3 id=\"2-dto-직접-조회-1\" style=\"position:relative;\"><a href=\"#2-dto-%EC%A7%81%EC%A0%91-%EC%A1%B0%ED%9A%8C-1\" aria-label=\"2 dto 직접 조회 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. DTO 직접 조회</h3>\n<p>-> ToOne(N:1, 1:1) 관계 조회</p>\n<ul>\n<li>ToMany(1:N) 관계 각각 별도로 처리 (개별 요소 마다 SQL로 데이터 가져와 객체에 추가)</li>\n<li>IN 절을 활용해서 메모리에 미리 조회해서 최적화</li>\n</ul>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>-> IN 절 활용하자</p>\n<h2 id=\"osiv와-성능-최적화\" style=\"position:relative;\"><a href=\"#osiv%EC%99%80-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"osiv와 성능 최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OSIV와 성능 최적화</h2>\n<blockquote>\n<p>Open Session In View: 하이버네이트</p>\n</blockquote>\n<ol>\n<li>\n<p>true</p>\n<ul>\n<li>최초 데이터베이스 커넥션 시작 시점부터 API 응답이 끝날 때 까지 영속성 컨텍스트와 데이터베이스 커넥션을 유지</li>\n<li>Filter Interceptor, Controller, View, Service, Repository</li>\n</ul>\n</li>\n<li>\n<p>off</p>\n<ul>\n<li>트랜잭션을 종료할 때 영속성 컨텍스트를 닫고, 데이터베이스 커넥션도 반환</li>\n<li>Service, Repository</li>\n<li>모든 지연로딩을 트랜잭션 안에서 처리</li>\n<li>@Transactional 어노테이션 가진 Service 계층에서 처리</li>\n<li><strong>핵심 비즈니스 로직</strong>과 <strong>화면이나 API맞춘 서비스</strong> 부분을 분리하는게 좋다.</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"tip\" style=\"position:relative;\"><a href=\"#tip\" aria-label=\"tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip!!</h1>\n<ul>\n<li>lombok 사용 시 Entity에 비해 DTO는 더 유연하게 사용<br>\n(중요한 로직이 많이 들어가 있지 않음)</li>\n<li>\n<p>비즈니스 로직 구성 시 쿼리와 커맨드를 분리 (CQS 패턴)</p>\n<ul>\n<li>Command : 내부에서 데이터 변경(사이드 이펜트), 값 반환x / Query : 데이터 변경x 값 반환o</li>\n<li>쓰기(insert, update) / 읽기(select) 분리 가능</li>\n<li><a href=\"https://medium.com/@su_bak/cqs-command-query-separation-pattern-%E1%84%8B%E1%85%B5%E1%84%85%E1%85%A1%E1%86%AB-f701eabf8754\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CQS(Command Query Separation) Pattern 이란? </a></li>\n</ul>\n</li>\n<li>캐시가 필요한 경우에는 <strong>DTO를 캐시</strong></li>\n</ul>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-JPA-API%EA%B0%9C%EB%B0%9C-%EC%84%B1%EB%8A%A5%EC%B5%9C%EC%A0%81%ED%99%94\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">실전! 스프링 부트와 JPA 활용2 API 개발과 성능 최적화</a></li>\n<li><a href=\"https://binarycube.tistory.com/1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA에서 순환참조를 해결하는 방법 | @JsonIgnore, @JsonManagedReference, @JsonBackReference</a></li>\n</ul>","excerpt":"Entity Mapping 양방향 매핑 설정 jackson라이브러리는 json생성 방법에 대해 모름 (무한 루프) 양방향 매핑관계 설정 시 한쪽에 @JsonIgnore 처리 해야 함 -> 실제로 Property에 Null 할당하는 방식 @JsonBa…","tableOfContents":"<ul>\n<li>\n<p><a href=\"/JPA_3/#entity-mapping\">Entity Mapping</a></p>\n<ul>\n<li><a href=\"/JPA_3/#entity-%EC%82%AC%EC%9A%A9%EC%8B%9C-%EB%AC%B8%EC%A0%9C\">Entity 사용시 문제</a></li>\n<li><a href=\"/JPA_3/#dto-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EC%9E%A5%EC%A0%90\">DTO 사용 시 장점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/JPA_3/#%EC%84%B1%EB%8A%A5-%ED%8A%9C%EB%8B%9D\">성능 튜닝</a></p>\n<ul>\n<li><a href=\"/JPA_3/#1-entity%EB%A5%BC-dto-%EB%B3%80%ED%99%98---%ED%8C%A8%EC%B9%98-%EC%A1%B0%EC%9D%B8\">1. Entity를 DTO 변환 -> 패치 조인</a></li>\n<li>\n<p><a href=\"/JPA_3/#2-dto-%EC%A7%81%EC%A0%91-%EC%A1%B0%ED%9A%8C\">2. DTO 직접 조회</a></p>\n<ul>\n<li><a href=\"/JPA_3/#%EC%84%B1%EB%8A%A5-%ED%8A%9C%EB%8B%9D-%EA%B6%8C%EC%9E%A5-%EC%88%9C%EC%84%9C\">성능 튜닝 권장 순서</a></li>\n</ul>\n</li>\n<li><a href=\"/JPA_3/#%EC%BB%AC%EB%A0%89%EC%85%98-%EC%A1%B0%EC%9D%B8-%EC%B5%9C%EC%A0%81%ED%99%94\">컬렉션 조인 최적화</a></li>\n<li>\n<p><a href=\"/JPA_3/#%EC%BB%AC%EB%A0%89%EC%85%98-%EC%97%94%ED%8B%B0%ED%8B%B0-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%ED%8E%98%EC%9D%B4%EC%A7%95-%EC%B2%98%EB%A6%AC\">컬렉션 엔티티 사용 시 페이징 처리</a></p>\n<ul>\n<li><a href=\"/JPA_3/#1-%EC%97%94%ED%8B%B0%ED%8B%B0-%EC%A7%81%EC%A0%91-%EC%A1%B0%ED%9A%8C\">1. 엔티티 직접 조회</a></li>\n<li><a href=\"/JPA_3/#2-dto-%EC%A7%81%EC%A0%91-%EC%A1%B0%ED%9A%8C-1\">2. DTO 직접 조회</a></li>\n<li><a href=\"/JPA_3/#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</li>\n<li><a href=\"/JPA_3/#osiv%EC%99%80-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94\">OSIV와 성능 최적화</a></li>\n</ul>\n</li>\n<li><a href=\"/JPA_3/#tip\">Tip!!</a></li>\n<li><a href=\"/JPA_3/#reference\">Reference</a></li>\n</ul>","fields":{"slug":"/JPA_3/"},"frontmatter":{"title":"실전! 스프링 부트와 JPA 활용2 - API 개발과 성능 최적화","date":"Sep 27, 2022","tags":["JPA"],"keywords":["JPA"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/JPA_3/","series":[{"slug":"/JPA_1/","title":"자바 ORM 표준 JPA 프로그래밍 (기본편)","num":1},{"slug":"/JPA_2/","title":"실전! 스프링 부트와 JPA 활용1 - 웹 애플리케이션 개발","num":2},{"slug":"/JPA_3/","title":"실전! 스프링 부트와 JPA 활용2 - API 개발과 성능 최적화","num":3},{"slug":"/JPA_4/","title":"실전 스프링 데이터 JPA","num":4},{"slug":"/JPA_5/","title":"Querydsl","num":5}],"lastmod":"2022-09-27"}},"staticQueryHashes":["2027115977","694178885"]}